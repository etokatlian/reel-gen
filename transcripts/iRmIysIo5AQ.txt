I&amp;#39;ve been using VSS code for the past 7 years and while I like most of it there are so many new editors on the market I wanted to give them a shot so for the past 6 months I&amp;#39;ve been using neovim Zed and cursor and I want to talk about it now this is just my experience and yours may vary but I want to talk about the things I did like the things I didn&amp;#39;t like and then the editor I&amp;#39;m using today so I started with neovim and at the same time I learned Vim for the first time in all my 15 years of programming I never really learned how to use vim and I had some time off from parental leave and I wanted to learn more about Vim so I downloaded neovim I got set up with the neovim Kickstart and I was Off to the Races pretty quickly learning all of the different Vim motions and key bindings and customizing my editor and it was honestly really really fun I&amp;#39;d seen other developers use Vim before and I always thought it was so amazing watching how fast they could just move through the file navigating to specific lines of code or how quickly they could change out content inside of specific pieces of code or just navigate to one specific bit so I just jumped right in I very quickly learned just the basic key movements and the basic commands all the way up to understanding the vocabulary of them so if I have this paragraph tag and I want to change the contents inside of the paragraph tag I could do CIT T and remove all of that content inside of the tag go into insert mode so I can say hello I can type something press Escape which I of course M to caps lock for my Vim fans here to go back into the normal mode where I can kind of move around and it was just so fun to learn all of this to customize my editor and I got this you know file Tree on the left and really quickly try to use my keyboard for everything moving between files and creating files and it was a rabbit hole to say the least I have to give a huge shout out to the neovim team and TJ who were incredibly helpful and this Kickstart repo which helps you build your own configuration very quickly it allowed me to get all the bits and pieces that I wanted and along the way as I was setting it up I started just documenting all the things I was learning and I built this kind of little mini course I called Vim for react developers that just gave you some exercises you could go through where you could modify react components and learn some of the Vim motions now you didn&amp;#39;t necessarily need to use neovim for that you could just use Vim anywhere but this was fun for me to basically learn as I learned and teach people some of these things so overall I&amp;#39;m really glad I learned this neovim also gave me an appreciation for honestly a lot of things I&amp;#39;d taken for granted inside of vs code like language server protocols or LSPs things like typescript or even Tailwind CSS uh and it also made me revisit honestly the whole tool stack I used even things like Git it made me appreciate the git support in vs code so for example on this file I made some changes if I go ahead and Sav those changes I installed the lazy git integration into my uh NE environment which pops up this kind of place where I can view diffs and I can commit from here I can look at branches I can do stashing in a little more visual way this worked fine and it wasn&amp;#39;t necessarily bad uh it was actually very good for a terminal environment and I I would recommend it it just wasn&amp;#39;t what I had came to appreciate from the Simplicity of especially viewing diffs in the vs code environment uh but it was nice to be reminded of that and set up all these tools and explore the breadth of tools my myself when kind of building something for Scratch in the terminal I also just completely stopped using any AI features for a few months so no autocomplete no co-pilot no you know built-in IDE editor features um just to feel what it was like and see how much the LSPs would help me out and they were helpful but I did miss some of the AI features I did check out Avante which is a neovin plugin that gives you some of that cursor composer like experience which we&amp;#39;ll talk about more in a little bit and it was very cool so if if you are kind of bought into the Vim neovim ecosystem definitely check out this plugin very very cool okay so lots of good stuff what did I not like well the customization is amazing however there definitely were a few times where I accidentally messed up the Lua config and I had to go ask GPT to help me fix my Lu config or maybe I just configured something wrong when updating plugins and I got into a broken State maybe this is a skill issue maybe I just don&amp;#39;t understand it fully enough yet but it was a little Annoying to have to go through some of that configuration when you kind of just want it to work at that point it kind of shifted from this is a fun little side project to oh wait I actually need to get my work done I need to code and I wanted to spend less time on the configuration side that being said it was still fun to learn I think the biggest reason why ultimately I decided to explore different pastures and move to zed was the day-to-day experience of actually using it as your daily driver editor I I think you know if I&amp;#39;m sshing into a server I would love to use themm and I think that&amp;#39;s fantastic but it was hard to put words to the experience of just the micro UI interactions of what VSS code or Zed or other kind of idees give you it just felt better on my eyes using it every day the small little subtle details even like scrolling through the file even with an amazing terminal like ghosty which I use as my daily driver terminal still it just felt easier to use so ultimately I decided okay I think I do want to try out Zed I want to see how that compares we&amp;#39;re going to go back and forth we&amp;#39;re also going to try out cursor so I ended up moving to zed when Zed first came out I gave it a shot but it was really early and it didn&amp;#39;t really have everything I needed so I was looking forward to giving it another shot and I&amp;#39;ve always appreciated their design sense their taste I mean you can see it on their website it&amp;#39;s beautiful and the editor also it just feels great to use it has a wonderful F design and also I have a ton of respect for them just building this from the ground up Rewritten in I believe it&amp;#39;s using rust and it&amp;#39;s all open source which I think is just fantastic so I was excited to try it out again the first thing I did was go through and configure some of the things to honestly work more like neovim because I had gotten used to that environment and Zed has a really fantastic Vim mode so if you like vim and you&amp;#39;re totally bought into Vim motions and you&amp;#39;ve built all that muscle memory definitely check out Zed I thought it worked fantastic for that uh and we actually made a little custom versell theme there&amp;#39;s one on the Zed extension store that&amp;#39;s pretty close to what we had here I tweaked some of the colors but made it more versell branded I also just love a lot of the default design choices in Zed it feels very appealing to look at um so I enjoyed the day-to-day of just visually being inside of the editor so the Vim support was great I love the design but my two big gripes at least so far had been around get support or the visual G support and then the AI features now the Zed team has been incredibly receptive to feedback and very open and reaching out and getting in touch with me which I appreciate and I was happy to find out that they were working on both of these things so they had their uh road map pretty open and get support and better kind of AI composer features were high up on the list so I&amp;#39;ve had a chance to try out some of these new features since they&amp;#39;ve been available in Zed as well as their tab completion model and they&amp;#39;re definitely making a lot of good changes so for example in this file I have the diff from inside of neovim where I Chang the snippet here I can view that diff in line and Stage it or delete it uh and then let&amp;#39;s say I had to change in another file as well down here I can click on the git panel I can see the different changes and I can click and view the uncommitted changes here if I want I can say yes I want both of these changes I can hit a commit and I can push it now this has worked pretty well I do think it&amp;#39;s still early so I&amp;#39;m sure a lot of this will change I don&amp;#39;t think it&amp;#39;s out of beta yet at least at this point and the team&amp;#39;s been very receptive to feedback although it did make me appreciate actually how robust the vs code support for git is the fact that you can do a lot of different things from the command panel so you know shift command P get commit for example Zed&amp;#39;s added some of this in terms of branching and committing uh my feedback to the team was I would love to see basically everything the VSS code one has checking out branches is pushing branches pushing to different remotes um I think cursor also has a feature to automatically generate commits which I don&amp;#39;t think that Zed has yet so they&amp;#39;re making a lot of progress here I thought it was really good and I&amp;#39;m happy to see them pushing in this direction cu the visual G support it&amp;#39;s just nice I know you can still use the editor I was using lazy git uh inside of here but I just I kind of like the visual diffs they&amp;#39;re really helpful Zed also has a beta for improvements to their composer editor type view so for example I could say uh I want this file page here and inside of here maybe we want to replace uh the copy with more realistic copy I don&amp;#39;t know and I can do command enter to chat or command shift enter to suggest edits so I&amp;#39;ll go ahead and do that it&amp;#39;s going to Output some of the edits update the homepage copy to be more professional and go ahead and suggest some of those changes and I&amp;#39;m using uh Cloud 3.5 son here but you can change the models that you would like and we&amp;#39;re going to see what it comes back with um so it looks like this is done we can click here we can see uh launch your SAS product without the hassle so we&amp;#39;ve got a bunch of diffs here and then if I want to go ahead and apply those apply all with command shift a so I&amp;#39;ll go ahead and we&amp;#39;ll apply all of those great I can close this and you know we can see all the different changes inside of here so that works pretty well as I&amp;#39;ll talk more in the cursor section it just feels like cursor is a little bit further along in this uh kind of composer agent type workflow uh with the right side chat but I like that Zed has made a lot of progress here to be honest I haven&amp;#39;t used the composer type feature that much inside of Zed I was mostly using it for some of the inline edits the AI features um but I&amp;#39;m glad that they&amp;#39;re making improvements here as well by far the biggest change that Zed has made recently that I&amp;#39;ve thought was really really helpful is they shipped their own tab complete model so rather than using um something like a GitHub co-pilot for autocompletes let&amp;#39;s say I had something like I don&amp;#39;t know inside of here I could say const user equals sure we could do that and now notice after I tabbed to complete it it went up and said tab to edit somewhere else so now I want to make this async tab async done okay async it user maybe I want to make that change maybe I don&amp;#39;t um I thought that was pretty pretty nice that it can just Bop around the file and that&amp;#39;s especially helpful if for example maybe I&amp;#39;m doing something like um I don&amp;#39;t know let&amp;#39;s say this was a client component and inside of here we wanted like um I don&amp;#39;t know count set count and we need use State and I think one thing that I&amp;#39;ve seen from cursor&amp;#39;s model is it gets these errors it handles these erors a little bit better so I would have kind of expected a tab completion here to tell me actually I need to go import US state but I can pull up this uh autocomplete here and I can say oh import from react so it still works pretty well um but they&amp;#39;ve made huge strides with the tab completion model so I&amp;#39;m really excited to see that now since I&amp;#39;ve been back in an IDE like Zed and I had been away from the terminal environment yes I was still using the Vim mode inside of Zed but I found myself honestly kind of regressing on my Vim features as you can see here I&amp;#39;m still in normal mode I press I to go into the edit mode and then escape to go back so I am still using it but I found myself going into insert mode making a bunch of changes and then kind of just hanging out in insert mode not really doing the full Vim experience for the Vim experts here who see me like moving around like this you&amp;#39;re probably like ah I can&amp;#39;t believe he&amp;#39;s just navigating up and down like you know some basic when really he should be doing the 15 down or 15 up with you know the arrow keys I just I never really got there and I think honestly it&amp;#39;s because I have so many years of muscle memory of navigating through the keyboard with arrow keys and I had gotten really comfortable in the coding environment that I was in and I was willing to kind of give that all up to give it a shot with them and I did really enjoy doing that I learned a lot but I just slowly found myself regressing on using more and more Vim features for example I&amp;#39;d be here I&amp;#39;d be in edit mode yes I could go back and do delete and tag or whatever but I&amp;#39;d be in edit mode and I would just uh command shift left and just select all of that and then delete it and move around and I had just gotten this you know this kind of workflow of moving around and command shift left selecting text um I gotten so used to it that ultimately I was like okay maybe I just put the Vim on pause for a sec and let&amp;#39;s see what life is like when I go do my cursor evaluation so finally I landed in cursor after months in neovim and in the terminal and months in Zed and honestly it felt kind of good to be back in a VSS Cod like environment now of course I had used VSS code for seven years prior so this is where I was comfortable this is where I was familiar but I just have a new appreciation for a lot of the things that VSS code was doing for me under the hood and the ecosystem it had built with extensions and settings that you can override and just overall stability of the platform it makes sense to me why cursor and others have decided to build on top of the VSS code Foundation you just get a lot for free and yes I know even if it&amp;#39;s a rapper the amount of value ad you&amp;#39;re still getting out of these editors built on top of that foundation and also being able to bring in all of your previous settings or extensions is really really valuable that does mean that it also brings the cons of VSS code as well which one of the things that I originally sought at with neovim was it was just so much faster to boot up neim and ghosty just from zero to open versus loading kind of the full IDE of a vs code or of a cursor so I think that is still one downside um I can live with it if the in editor experiences is already open and still really Snappy when it is open and booted and running so that part has been okay the reason why I&amp;#39;ve been really enjoying using cursor is it&amp;#39;s really two main things it is the Tab model and it is the composer feature I know there&amp;#39;s more that you can do in cursor but the autocomplete of tab it just feels really robust so for example let&amp;#39;s try that same thing where I do use client and then let&amp;#39;s do a like see even that felt a little bit faster we&amp;#39;ll do this sure we&amp;#39;ll do all of that and it it also got the Imports right so granted maybe this isn&amp;#39;t what I even really wanted to do but this is just a a demo to show that generally when it&amp;#39;s getting the autocompletes right and you&amp;#39;re kind of in the flow and you&amp;#39;re tabbing along it can get really good at understanding the next thing that you want to add and then just doing the Imports for you it&amp;#39;s like a little thing but it&amp;#39;s so nice when it does it right so I found the Tab model to be very fast very helpful which makes sense since the super Maven team who had a really great tab uh complete model has since joined cursor that&amp;#39;s been one thing that I&amp;#39;ve really enjoyed the second thing is there kind of composer or agent like feature I just feel like the ux of the design is a little bit better actually than Zed which is kind of ironic because visually I think that Zed has prettier pixels but I feel like the actual ux of like how you select the context of the files like this versus SL file feels a little bit better in this environment um as well as switching between ask or agent and picking between the models like this this flow especially applying diffs just feels a lot better so let&amp;#39;s say for example um add another button on the page below the terminal to uh go to the docs I don&amp;#39;t know so we&amp;#39;re going to use the agent mode here I believe I&amp;#39;m using Claude as well um just in the model here so it&amp;#39;s going to go it&amp;#39;s going to actually generate this code it should output a diff that I can just view on the screen and then in one click great so the ux here like visually of how I understand these diffs and apply these diffs it just feels a little bit better um I like this checkbox over here on the right or I can accept or reject here and I can also step through multiple files if there are multiple changes so I&amp;#39;ve found this to be pretty good and you can actually do quite a bit with this agent workflow I think that if you&amp;#39;re building something from scratch from 0 to one and you want to get started building a bunch of different files this can be really helpful I do some work with larger monor repos and and pretty large code bases and I found that the quality of the agent output wasn&amp;#39;t as good in those situations even when I had went through and indexed the whole repo inside of cursor it just felt like it needed a bit more handh holding which I think makes sense I can&amp;#39;t expect AI to be perfect of course and I know you can steer this a little bit with specific features like cursor rules and maybe giving the AI a bit more instructions so I know it&amp;#39;s still pretty early here but at least for some of the basic stuff I found this feature to be very helpful especially if I&amp;#39;m jumping into a codebase I don&amp;#39;t know exactly where to go I&amp;#39;ve had a mixed bag of success sometimes it&amp;#39;s able to basically immediately figure out where to go make the change in what file and just give me the DI and in others especially the larger ones like I said a little bit more difficult but I&amp;#39;m excited for this to continue getting better and I think one of the things that I have liked the most from the cursor team is it feels like they are very bleeding edge state-of-the-art in terms of AI features basically as soon as a new model or a new paradigm opens up whether it&amp;#39;s agents or mCP which we can talk about it seems like they&amp;#39;re right on top of it and they&amp;#39;re leading the way so I&amp;#39;ve been very uh very positive in that regard with cursor the other thing cursor can do that&amp;#39;s very new and still kind of rough is integrate with Mod model context protocol which are basically like apis for your llms to talk to so your llm can use it&amp;#39;s like it has an API to call apis or really anything so for example we have a experimental versell mCP where I could say list all of the projects uh in my forell team and when I use this agent mode it&amp;#39;s able to have the context of what mcps I basically have installed or configured and can say hey I want to call this tool projects get projects I can authorize it cuz this could be both uh reads and writes or deletes so we want to make sure that we&amp;#39;re uh giving authorization so I&amp;#39;ve got a bunch of different things here um it&amp;#39;ll go on forever but because I have like hundreds of hundreds of different projects on this team but just&amp;#39;s a whole bunch of things I&amp;#39;ve built here and it&amp;#39;s pretty cool that there&amp;#39;s a way especially in an agentic way or could potentially running in the background even with a human in the loop which is just a fancy way of saying me authorizing it to allow the AI model to go talk to different Services it could be for sale it could be many different things I think the future here is interesting maybe it&amp;#39;s not exactly mCP maybe it&amp;#39;s something like this but again it&amp;#39;s nice to see cursor exploring this integrating this and trying to make something possible here one thing with cursor that I haven&amp;#39;t really explored too much are cursor rules or really other mCP servers and there&amp;#39;s an awesome cursor director here from the community and the folks behind langu uh and midday where they have a bunch of these um cursor rules that you can check out so you&amp;#39;re an expert in frontend Dev and react and nextjs and Shad CN and all these things you can then copy them into your repo and it basically steers the AI and the right direction a little bit for example midday has this cursor rules that says you&amp;#39;re expert in typescript in node and nextjs and they&amp;#39;ve basically hardcoded their rules for their app exactly what they always want the AI to do and what they never want it to do so they always want to use next safe action and they want to prioritize server components and they&amp;#39;re using nuck for their uh query State and they want to follow the nextjs docs for data fetching and rendering so this is pretty cool I haven&amp;#39;t really dive dove into this too much but I think it&amp;#39;s interesting and it&amp;#39;s worth exploring so yeah now that I&amp;#39;ve been spending more time in cursor after months in neovim and in Zed I really like both of those tools but I also have a new appreciation for cursor and I think it&amp;#39;s the tool I&amp;#39;m going to continue to use for more months to come as I&amp;#39;m still trying out all of these different code editors but by far I think it has been my favorite tool I&amp;#39;ve used thus far which could be again to my familiarity with the VSS code environment but I just really feel like they&amp;#39;ve nailed a lot of the ux patterns around using AI models which I don&amp;#39;t do all the time but when I want to do it especially the autocomplete and the Imports it&amp;#39;s really nice now there&amp;#39;s a few other tools that I didn&amp;#39;t mention that I&amp;#39;m aware of I&amp;#39;m sure I probably missed others but I&amp;#39;ll just give a quick shout out at the end wind surf is another AI powered code editor that I know a lot of people really really like I haven&amp;#39;t had a chance to really try it out yet and give it a a fair shot so maybe I&amp;#39;ll do that over the next 6 months as I&amp;#39;m trying out more editors I&amp;#39;ve heard a lot of people really rant and Rave about it so that&amp;#39;s another one to check out and then of course at versell we work on vzer which allows basically anybody a developer or not a developer to write some prompt write something and build an application build the first version of their app whether it&amp;#39;s something on the front end something on the back end I I mean obviously I&amp;#39;m going to like this tool I&amp;#39;m going to use it because I work it for sale I didn&amp;#39;t want to spend as much time on this because you can hear me talk about vzer anytime and I generally think that for professional software developers they&amp;#39;re going to be spending a lot more time in their editor so I wanted to spend most of the time on that but vzer is great for generating UI especially if you&amp;#39;re building react or nextjs or anything in the versell ecosystem uh you it&amp;#39;s great for that so that wraps it up I think if I could go back 15 years I would probably start learning Vim from the start it&amp;#39;s great and maybe that would change where I landed but I had a great time with neovim it was a lot of fun I love a lot of the parts about Zed and the team there is fantastic and cursor is just continuing to get better and better so there&amp;#39;s never been a better time honestly for the state of Dev tools especially with all the improvements in AI happening incredibly rapidly so it&amp;#39;s a fun space to watch it&amp;#39;s a fun space to be in and at least for now I&amp;#39;m going to keep using cursor and you know keep chugging away and see how it goes maybe I&amp;#39;ll have to do another video in 6 months but I would love to hear what you all think have you been trying some of this stuff out I know I&amp;#39;ve seen comments in my videos oh he&amp;#39;s in ym now he&amp;#39;s in Zed now and I&amp;#39;ve been kind of all over the board so yeah I&amp;#39;m curious what other people are doing um if you&amp;#39;ve been using cursor or neovim or Zed and you really like it please leave a comment down below I&amp;#39;d love to hear from you and maybe I&amp;#39;ll do another one in six months all right peace